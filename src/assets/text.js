const bookData = [
  {
    book_id: 1,
    book_name: 'vue',
    chapter_collect: 1,
    page__collect: 1,
    section: 1,
    bookContents: [
      {
        chapter_id: 1,
        title: 'chapter-01',
        setions: [
          { setion_id: 0, locationId: 1, title: 'setion1', textContent: '<h2>Chapter-01-setion1 Vue.js</h2> <p> chapter-01--setion1 Vue (pronounced /vjuː/, like view) is a progressive framework for building user interfaces. Unlike other monolithic frameworks, Vue is designed from the ground up to be incrementally adoptable. The core library is focused on the view layer only, and is easy to pick up and integrate with other libraries or existing projects. On the other hand, Vue is also perfectly capable of powering sophisticated Single-Page Applications when used in combination with modern tooling and supporting libraries.</p>   Vue (pronounced /vjuː/, like view) is a progressive framework for building user interfaces. Unlike other monolithic frameworks, Vue is designed from the ground up to be incrementally adoptable. The core library is focused on the view layer only, and is easy to pick up and integrate with other libraries or existing projects. On the other hand, Vue is also perfectly capable of powering sophisticated Single-Page Applications when used in combination with modern tooling and supporting libraries.Vue (pronounced /vjuː/, like view) is a progressive framework for building user interfaces. Unlike other monolithic frameworks, Vue is designed from the ground up to be incrementally adoptable. The core library is focused on the view layer only, and is easy to pick up and integrate with other libraries or existing projects. On the other hand, Vue is also perfectly capable of powering sophisticated Single-Page Applications when used in combination with modern tooling and supporting libraries.' },
          { setion_id: 1, locationId: 2, title: 'setion2', textContent: '<h2>Chapter-01-setion2 Vue.js</h2>chapter-01--setion2 Vue (pronounced /vjuː/, like view) is a progressive framework for building user interfaces. Unlike other monolithic frameworks, Vue is designed from the ground up to be incrementally adoptable. The core library is focused on the view layer only, and is easy to pick up and integrate with other libraries or existing projects. On the other hand, Vue is also perfectly capable of powering sophisticated Single-Page Applications when used in combination with modern tooling and supporting libraries.' },
          { setion_id: 2, locationId: 3, title: 'setion3', textContent: '<h2>Chapter-01-setion3 Vue.js</h2>chapter-01--setion3 Vue (pronounced /vjuː/, like view) is a progressive framework for building user interfaces. Unlike other monolithic frameworks, Vue is designed from the ground up to be incrementally adoptable. The core library is focused on the view layer only, and is easy to pick up and integrate with other libraries or existing projects. On the other hand, Vue is also perfectly capable of powering sophisticated Single-Page Applications when used in combination with modern tooling and supporting libraries.  Vue (pronounced /vjuː/, like view) is a progressive framework for building user interfaces. Unlike other monolithic frameworks, Vue is designed from the ground up to be incrementally adoptable. The core library is focused on the view layer only, and is easy to pick up and integrate with other libraries or existing projects. On the other hand, Vue is also perfectly capable of powering sophisticated Single-Page Applications when used in combination with modern tooling and supporting libraries.' }
        ]
      },
      {
        chapter_id: 2,
        title: 'chapter-02',
        setions: [
          { setion_id: 0, locationId: 4, title: 'setion5', textContent: '<h2>Chapter-02-setion5 Vue.js</h2>chapter-02--setion5 Vue (pronounced /vjuː/, like view) is a progressive framework for building user interfaces. Unlike other monolithic frameworks, Vue is designed from the ground up to be incrementally adoptable. The core library is focused on the view layer only, and is easy to pick up and integrate with other libraries or existing projects. On the other hand, Vue is also perfectly capable of powering sophisticated Single-Page Applications when used in combination with modern tooling and supporting libraries.  Vue (pronounced /vjuː/, like view) is a progressive framework for building user interfaces. Unlike other monolithic frameworks, Vue is designed from the ground up to be incrementally adoptable. The core library is focused on the view layer only, and is easy to pick up and integrate with other libraries or existing projects. On the other hand, Vue is also perfectly capable of powering sophisticated Single-Page Applications when used in combination with modern tooling and supporting libraries.' },
          { setion_id: 1, locationId: 5, title: 'setion6', textContent: '<h2>Chapter-02-setion6 Vue.js</h2>chapter-02--setion6 Vue (pronounced /vjuː/, like view) is a progressive framework for building user interfaces. Unlike other monolithic frameworks, Vue is designed from the ground up to be incrementally adoptable. The core library is focused on the view layer only, and is easy to pick up and integrate with other libraries or existing projects. On the other hand, Vue is also perfectly capable of powering sophisticated Single-Page Applications when used in combination with modern tooling and supporting libraries.' },
          { setion_id: 2, locationId: 6, title: 'setion7', textContent: '<h2>Chapter-02-setion7 Vue.js</h2>chapter-02--setion7 Vue (pronounced /vjuː/, like view) is a progressive framework for building user interfaces. Unlike other monolithic frameworks, Vue is designed from the ground up to be incrementally adoptable. The core library is focused on the view layer only, and is easy to pick up and integrate with other libraries or existing projects. On the other hand, Vue is also perfectly capable of powering sophisticated Single-Page Applications when used in combination with modern tooling and supporting libraries.  Vue (pronounced /vjuː/, like view) is a progressive framework for building user interfaces. Unlike other monolithic frameworks, Vue is designed from the ground up to be incrementally adoptable. The core library is focused on the view layer only, and is easy to pick up and integrate with other libraries or existing projects. On the other hand, Vue is also perfectly capable of powering sophisticated Single-Page Applications when used in combination with modern tooling and supporting libraries.' }
        ]
      },
      {
        chapter_id: 3,
        title: 'chapter-03',
        setions: [
          { setion_id: 0, locationId: 7, title: '六大纪元', textContent: ' <h2>第一章 六大纪元</h2> <p>  我不能确定自己是在什么时候第一次意识到奇点的，应该承认这是一个逐渐认识的过程。在近半个世纪的时间里，我致力于计算机及其相关技术的研究工作，并努力去理解我亲身经历的很多层面上的巨大变革及其背后的内涵和意义。渐渐地，我开始认识到21世纪前五十年里变革的大致轮廓——就好像空间中的黑洞突然改变了物质和能量的模式，加速朝其边界发展。这逼近未来的奇点，从肉体到精神，逐步地改造人类生活的各个方面。</p> <p>  那么，什么是奇点呢？奇点是未来的一个时期：技术变革的节奏如此迅速，其所带来的影响如此深远，人类的生活将不可避免地发生改变。虽然这个纪元既不是乌托邦，也不是反乌托邦的形态，但它将人类的信仰转变为生命能理解的意义；将事物模式本身转变为人类生命的循环，甚至包含死亡本身。理解奇点，将有利于我们改变视角，去重新审视过去发生的事情的重要意义，以及未来发展的走向。一个人真正理解了奇点的含义，将从根本上改变他的人生观和他的人生。我所尊重的一些人，他们理解了奇点，领悟了它的内涵，他们终身都是奇点人。</p> <p>我可以理解，为什么很多观察家不能较快地意识到加速回归定律的本质内涵（发展变革的本质加速，包括技术的进化作为生物进化的延续）。毕竟，我用了四十年的时间去见证这个定律的正确性，而且，这个定律所带来的后果并不都是令人满意的。</p> <p>奇点临近暗含一个重要思想：人类创造技术的节奏正在加速，技术的力量也正以指数级的速度在增长。指数级的增长是具有迷惑性的，它始于极微小的增长，随后又以不可思议的速度爆炸式地增长——如果一个人没有仔细留意它的发展趋势，这种增长将是完全出乎意料的（见图1-1）。</p> <p>请看这样一个寓言：一个湖的主人希望呆在家中照料湖中的鱼，他要确保湖面不会被百合浮萍覆盖，这种浮萍据说每天都以其自身两倍的数量增长。日复一日，湖的主人耐心地等待，他发现只有很少量的百合浮萍出现，而且它们似乎不会以任何显著的方式扩展蔓延。由于只有不到百分之一的湖面覆盖了百合浮萍，湖的主人确认可以与家人度过一个悠闲的假期。几周之后，当他回来的时候，他被眼前的景象震惊了：整个湖面都被浮萍覆盖了，所有的鱼也都死了。由于浮萍的数量以每天成倍的速度增长，7次加倍就可以使浮萍覆盖整个湖面（7次加倍将达到原来128倍）。这个例子说明了指数增长的内涵。</p>  <p>再来看看国际象棋世界冠军格瑞·卡斯帕罗夫，1992年，他曾不屑于计算机棋手的水平。但是由于计算机的能力每年都以两倍的速度递增，所以五年后，卡斯帕罗夫被计算机击败。在很多方面，计算机现在已经超越了人类的计算能力，并以更快的速度发展。同时，计算机智能应用也在逐渐拓宽。举例来说，计算机能够诊断心电图和医学图像，侦测飞机的起飞与降落，控制自动武器的战术决策，做出信用与金融决策，同时承担着很多需要人工智能辅助完成的任务。但是人工智能在众多领域也存在缺陷，怀疑者认为人工智能在某些领域无法超越人类智能，这恰恰说明了人类的能力优于其本身的创造能力。</p>  <p>尽管如此，本书将会讨论在未来的几十年里，基于信息的技术将会容纳人类所有的知识和技能，甚至包含识别模式的能力、解决问题的技巧，以及人类大脑中内在的情感与道德的智慧。</p>' },
          { setion_id: 1, locationId: 8, title: '技术进化理论：加速回归定律', textContent: '<h2>第二章 技术进化理论：加速回归定律</h2>  <p>你能向后看得越久，就能向前看得越远。</p>  <p>——温斯顿·丘吉尔</p>  <p>20亿年前，我们的祖先是微生物；5亿年前，是鱼类；一亿年前，是类似于哺乳动物的生物；1000万年前，是类人猿；100万年前，原始人类经过苦苦探索后驯服了火。我们演化进程的典型特征是把握变化，如今变化的节奏正在加快。</p>  <p>——卡尔·萨根</p>  <p>我们唯一的任务是制造出比我们更聪明的东西，除此之外都不是由我们考虑的问题……世界上本没有绝对的难题，只有相对于一定智力水平的难题。若智力水平向上提升了一点，一些原来不能解决的难题就变得容易了；如果智力水平提升了一大步，所有的问题就都能被解决。</p>  <p>——埃里泽·余德努维奇，凝视奇点，1996</p>  <p>技术的不断加速是加速回归定律的内涵和必然结果，这个定律描述了进化节奏的加快，以及进化过程中产物的指数增长。这些产物包括计算的信息承载技术，其加速度实质上已经超过了摩尔定律做出的预测。奇点是加速回归定律的必然结果，所以我们研究这一进化过程的本质属性非常重要。</p>  <p>秩序的本质。第1章描绘的几张图证明了范式迁移的加速度（范式迁移是指完成任务的方法和智能处理的过程发生了重要改变，例如书写语言和计算机。）这些图表描绘了从宇宙大爆炸到互联网发明时期，生物和技术进化两方面的过程，它们已经被15个思想家和相关的著作视为关键的事件。我们可以看到这些事件呈现出一种明显的指数增长趋势：关键事件正以日益加快的节奏发生着。</p>  <p>思想家们关于构成“关键事件”的标准不尽相同，但是他们做出选择所依据的原则值得深思。一些评论员认为，在生物和技术的历史中，真正跨时代的进步涉及复杂度的增加</p>  <p>。尽管复杂度确实随着生物和技术进化不断增加，但我并不认为这个观点是完全正确的。首先我们要重新审视复杂度的定义。</p>  <p>毫不奇怪，复杂度的概念是复杂的。复杂度的其中一个定义如下：表达一个过程所需要的最少信息量。比如设计一个系统（例如，一个计算机程序或者一个计算机辅助设计文件），这个系统可以由一个100万比特大小的数据文件来描述，我们就可以说这个设计的复杂度为100万比特。但是如果这100万比特的信息本质上是由某种形式的1000比特重复了1000次构成的，我们就能够通过这1000个比特来表达整个设计，从而将文件的大小减少大约1000倍。</p>  <p>最流行的数据压缩技术使用了类似的剔除冗余信息的方法，但用这种方式压缩数据文件，无法知道是否还有更好的压缩方法。例如，假设需要压缩的文件是π（3.141592……），其精确度达到100万位。大部分数据压缩程序无法识别这个序列，完全不能进行压缩，因为π的二进制表达序列随机性很强，难以测试出重复的序列。</p>  <p>但是，如果我们能够确定该文件（或文件的一部分）实质上代表π，我们就可以很容易地将它（或它的一部分）表达得非常简洁，即“π，精度为100万比特”。由于我们不能确定信息序列是否有更加紧凑的表达方式，故任何压缩形式都只能作为信息复杂度的上界，摩尔德·盖尔曼沿着这个思路来定义复杂度。他的定义是：一组信息的“算法信息量”为“能使普通计算机输出位串并可以停止的最短的程序长度”</p>  <p>但是摩尔德·盖尔曼的定义并不完整。如果一个文件包含随机信息，它就不能被压缩。实质上，观察是确定一个数列是否真正随机的重要标准。但是，如果将任何随机序列设定为特殊的符号，那么这个信息就可以用简单的指令来表示，比如该指令为“该位置存放了随机的数字序列”。随机序列（无论是10比特或10亿比特）不能代表复杂度，因为它们都可以用一个简单的指令来表示。这也是随机序列和不可预知序列的区别。</p>' },
          { setion_id: 2, locationId: 9, title: '达到人脑的计算能力', textContent: '<h2>第三章 达到人脑的计算能力</h2>  <p>正如讨论发动机的发明一样，如果可以实现真正的人工智能，我们就有理由相信，人类可以创造比神经细胞快100万倍的东西。由此可以得出这样的结论：我们可以建立一些系统，并使它们的运行速度比人类快100万倍。通过人工智能，这些系统可以从事工程设计的工作。这样的话一个系统有能力创造一个比自己更好的系统，也就有了突然转变的可能性。即使跟纳米技术相比，这种情况处理起来也会显得更加困难，但更难得的是要在这个问题上有建设性的思考。虽然我不时地指出来“它也是很重要的”，但这已经不是我们讨论的焦点了。</p>  <p>——埃里克·德雷克斯勒，1989</p>  <h4>计算机技术第六范式：三维分子计算和新兴计算技术</h4>  <p>1965年4月19日，戈登·摩尔在《E1ectronics》杂志上这样写道：“集成电子的未来就是电子自身的未来。集成电路的优势将带来电子学的扩散，并把这门科学推广到很多新的领域。”摩尔通过这些话，宣告了一场势头正劲的革命的到来。为了让他的读者意识到这个新科学的深远意义，摩尔预言，“到1975年，国家经济将建立在一个由多达65000个元件压缩而成的单硅芯片上。”试想一下这些吧。</p>  <p>摩尔的文章描述了嵌入到集成电路上的晶体管（用作计算单元或者门电路）的数量，每年都会增长一倍。他在1965年提出的“摩尔定律”在当时饱受争议，因为他的片上元件数量对数图上只有5个参考点（从1959年到1965年），所以由此来预测1975的趋势是不成熟的。摩尔的最初估计是错误的，他在10年后修订了这一数字（更改为两年翻一番）。但是这个基本观点（由于集成电路板上晶体管体积的缩小而导致电子产品的性价比呈指数增长）被证明是正确的而且有先见之明的。</p>  <p>今天，我们谈论的是上十亿级而不是上千级的组件。2004年最先进的芯片中，逻辑门仅有50纳米宽，这已经完全是纳米级别（100纳米或以下即属于纳米技术范畴）的数值了。摩尔定律终有一天会终结，但这一典型范式的结束时间一直在推迟。Paolo Gargini，英特尔技术主管兼著名的国际半导体技术路线图（ITRS）主席，最近指出，“我们预测至少在未来15到20年时间里，电子产品将会按摩尔定律继续发展。事实上……纳米技术为我们提供了许多新的关键技术来增加一个芯片上元件的数量。”</p>  <p>就像我将用整本书去论证的那样，计算机技术的加速发展已经改变了社会关系、经济关系、政治体制以及其他一切。但是摩尔在他的文章里并没有指出，缩小体积的策略，实际上并不是给计算和通信带来指数级增长的第一范式。它只排在第5位，而且我们也已经可以看到接下来的大概情形：在分子水平和三维水平上的计算。尽管第五范式还会使用十几年，但我们已经在所有需要使用第六范式的技术上取得了令人信服的进展。在下一节，我将会分析为了达到人脑的智力水平所需要的计算和存储能力，以及为什么我们会相信，在不到20年里用不是很贵的计算机就能达到这样的水平。即使这些强大的计算机远没有达到最佳的状态，而且在本章的最后一节，我会回顾由目前我们所理解的物理定律所带来的计算限制。大约21世纪末，真正的计算机时代就会到来。</p>  <p>三维分子计算的桥梁。过渡阶段正在进行中：许多新的技术会促进第六代范式——分子三维计算的问世，这些技术包括纳米管和纳米管电路、分子计算、自组装纳米管电路、生物系统模拟电路组装、DNA计算、自旋电子学（电子的自旋计算）、光计算以及量子计算。其中许多独立的技术可以被集成到计算系统，最终将接近理论上物质和能量用于完成计算的能力的最大值，并且远远超过人脑的计算能力。</p>  <p>一种方法是采用光刻硅芯片来构建三维电路。Matrix Semiconductor公司已经在销售一种存储芯片，它含有垂直的晶体管堆叠层而不是一个平面层。由于三维芯片存储量更大，从而缩小了产品的体积，因此Matrix Semiconductor最初将目标定位到便携电子产品，以此同闪存（用于手机和数码相机，因为它在电源关闭时不会丢失信息）相竞争。而其中堆叠电路的应用还降低了每比特的价格。另一种方法来自于Matrix公司的竞争对手之一，文本冈富士雄（前东芝公司的工程师），就是他发明了闪存。富士雄声称他的新型内存设计（这种设计看起来像一个柱状体）降低了存储器的体积和每比特的价格，是平板芯片的十分之一。而这个三维芯片的工作原型，也在伦斯勒理工学院千兆集成中心和麻省理工学院媒体实验室得到了证实。</p>  <p>位于东京的日本电报电话公司（NTT）通过使用电子束平印术，展示了梦幻般的3D技术。电子束平印术可以创建任意特征尺寸（和晶体管一样）大约是10纳米的三维结构。 NTT公司通过创建一个大小为60微米、特征长度为10纳米的高分辨率的地球模型，证明了这项技术。NTT认为该项技术适用于电子设备的纳米加工，如半导体以及建立纳米级的机械系统。</p>  <p>纳米管依然是最佳选择。在《The Age of Spiritual Machines》一书中，我指出纳米管（用三维组织的分子来存储信息和充当逻辑门）是三维分子计算时代最有可能使用的技术。1991年首次合成的纳米管，是由六角形的碳原子网状物卷起来组成的无缝柱体。碳纳米管非常小——单壁纳米管的直径只有1纳米，这样可以达到很高的密度。</p>  <p>它们也可能很快。皮特·伯克和他在加利福尼亚大学欧文分校的同事最近证明了纳米管电路可以以2.5GHz运行。然而，在《Nano Letters》（美国化学学会同行评审期刊）上，伯克说，这些纳米晶体管的理论限速“应该是太赫兹（1THz=1000GHz）级别，大约是现代计算机速度的1000倍”。</p>' }
        ]
      }

    ]
  }
]

export default bookData
